# 此配置仅适用于ShellCrash Clash,其他ClashMeta客户端未经测试
# 更新时间: 2024-2-13 12:45
# 来源：https://github.com/Repcz/Tool/blob/X/Clash/Meta/ClashVerge.yaml

mixed-port: 7893      # 混合端口 HTTP和SOCKS5用一个端口
geodata-mode: true    #【Meta专属】使用geoip.dat数据库(默认：false使用mmdb数据库)
tcp-concurrent: false #【Meta专属】TCP 并发连接所有 IP, 将使用最快握手的 TCP
allow-lan: true       # 允许局域网的连接（可用来共享代理）
bind-address: "*"     # 仅在将allow-lan设置为true时适用
                      # #"*": 绑定所有IP地址
find-process-mode: strict           #匹配所有进程（always/strict/off）
ipv6: false           # 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求 AAAA 记录
mode: rule            # 规则模式：rule（规则） / global（全局代理）/ direct（全局直连）/ script (脚本)
log-level: info       # 设置日志输出级别 (5 个级别：silent / error / warning / info / debug）
external-controller: 0.0.0.0:9093   #外部控制器,可以使用 RESTful API 来控制你的 clash 内核
global-client-fingerprint: chrome   #全局 TLS 指纹，优先低于 proxy 内的 client-fingerprint
                                    #可选： "chrome","firefox","safari","ios","random","none" options.
geox-url:             #自定义 geodata url
  mmdb: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country-lite.mmdb"
  geoip: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  geosite: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite-lite.dat"

profile:
  store-selected: true # 存储 select 选择记录
  store-fake-ip: true  # 持久化 fake-ip

sniffer:               # 嗅探域名 可选配置
  enable: true
  parse-pure-ip: true  # 是否使用嗅探结果作为实际访问，默认 true
  sniff:
    TLS:               # TLS 默认嗅探 443
      ports: [443, 8443]
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    QUIC:
      ports: [443, 8443]

tun:                   # Tun 配置
  enable: true
  stack: system        # 可选： system/gvisor/mixed；tun 模式堆栈,如无使用问题,建议使用 system 栈;MacOS 用户推荐 gvisor栈
                       # system 使用系统协议栈,可以提供更稳定/全面的 tun 体验,且占用相对其他堆栈更低。 
                       # gvisor 通过在用户空间中实现网络协议栈,可以提供更高的安全性和隔离性,同时可以避免操作系统内核和用户空间之间的切换,从而在特定情况下具有更好的网络处理性能
                       # mixed 混合堆栈,tcp使用 system栈,udp使用 gvisor栈,使用体验可能相对更好
  dns-hijack: [any:53] # dns劫持,一般设置为 any:53 即可, 即劫持所有53端口的udp流量
# strict_route: true   # 将所有连接路由到tun来防止泄漏，但你的设备将无法其他设备被访问
  auto-route: true     # 自动设置全局路由，可以自动将全局流量路由进入tun网卡。
  auto-detect-interface: true     # 自动识别出口网卡

dns:
  enable: true             # 关闭将使用系统 DNS
  ipv6: false              # IPV6解析开关；如果为false，将返回ipv6结果为空
  enhanced-mode: fake-ip   # 模式：redir-host或fake-ip
  listen: 0.0.0.0:53       # DNS监听地址
  fake-ip-range: 198.18.0.1/16    # Fake-IP解析地址池
  fake-ip-filter: ['*.lan', 'cable.auth.com', '*.msftconnecttest.com', '*.msftncsi.com', 'network-test.debian.org', 'detectportal.firefox.com', 'resolver1.opendns.com', '*.srv.nintendo.net', '*.stun.playstation.net', 'xbox.*.microsoft.com', '*.xboxlive.com', 'stun.*', 'global.turn.twilio.com', 'global.stun.twilio.com', 'localhost.*.qq.com', 'localhost.*.weixin.qq.com', '*.logon.battlenet.com.cn', '*.logon.battle.net', '*.blzstatic.cn', 'music.163.com', '*.music.163.com', '*.126.net', 'musicapi.taihe.com', 'music.taihe.com', 'songsearch.kugou.com', 'trackercdn.kugou.com', '*.kuwo.cn', 'api-jooxtt.sanook.com', 'api.joox.com', 'joox.com', 'y.qq.com', '*.y.qq.com', 'streamoc.music.tc.qq.com', 'mobileoc.music.tc.qq.com', 'isure.stream.qqmusic.qq.com', 'dl.stream.qqmusic.qq.com', 'aqqmusic.tc.qq.com', 'amobile.music.tc.qq.com', '*.xiami.com', '*.music.migu.cn', 'music.migu.cn', 'proxy.golang.org', '*.mcdn.bilivideo.cn', '*.cmpassport.com', 'id6.me', 'open.e.189.cn', 'mdn.open.wo.cn', 'opencloud.wostore.cn', 'auth.wosms.cn', '*.jegotrip.com.cn', '*.icitymobile.mobi', '*.pingan.com.cn', '*.cmbchina.com', 'pool.ntp.org', '*.pool.ntp.org', 'ntp.*.com', 'time.*.com', 'ntp?.*.com', 'time?.*.com', 'time.*.gov', 'time.*.edu.cn', '*.ntp.org.cn', 'PDC._msDCS.*.*', 'DC._msDCS.*.*', 'GC._msDCS.*.*']
                           # fake ip 白名单列表'以下地址不会下发fakeip映射用于连接
  nameserver: [https://doh.pub/dns-query, https://dns.alidns.com/dns-query]


# 机场订阅链接
proxy-providers:
  我的机场:
    type: http
    # 机场订阅链接，使用 Clash 链接
    url: "此处机场订阅链接"
    path: ./providers/airport1.yaml
    interval: 43200
    health-check:
      enable: true
      # 未选择到当前代理集合时，不会进行测试，有多个代理集合时可使用
      lazy: true
      url: "https://www.gstatic.com/generate_204"
      interval: 600

# 自建节点
proxies: null

# 策略组
proxy-groups:
  # 分流分组
  # 手动选择示例
  #- {name: 手动切换, type: select, use: [Subscribe], proxies: [DIRECT, 香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: 海外网站, type: select, proxies: [香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: 海外媒体, type: select, proxies: [香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: 谷歌代理, type: select, proxies: [香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: 微软代理, type: select, proxies: [香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: 电报代理, type: select, proxies: [香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: 推特代理, type: select, proxies: [香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: 游戏代理, type: select, proxies: [香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: 苹果服务, type: select, proxies: [DIRECT, 香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: 哔哩哔哩, type: select, proxies: [DIRECT, 香港节点, 台湾节点]}

  # 节点地区分组
  - {name: 香港节点, type: url-test, tolerance: 100, lazy: true, use: [Subscribe], filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"            }
  - {name: 台湾节点, type: url-test, tolerance: 100, lazy: true, use: [Subscribe], filter: "(?=.*(台|TW|(?i)Taiwan))^((?!(港|日|韩|新|美)).)*$"             }
  - {name: 美国节点, type: url-test, tolerance: 100, lazy: true, use: [Subscribe], filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"     }
  - {name: 狮城节点, type: url-test, tolerance: 100, lazy: true, use: [Subscribe], filter: "(?=.*(新|狮|獅|SG|(?i)Singapore))^((?!(港|台|日|韩|美|西)).)*$" }
  - {name: 日本节点, type: url-test, tolerance: 100, lazy: true, use: [Subscribe], filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"              }
  - {name: 韩国节点, type: url-test, tolerance: 100, lazy: true, use: [Subscribe], filter: "(?=.*(韩|KR|(?i)Korea))^((?!(台|日|港|新|美)).)*$"              }

# 分流规则
rule-providers:
 # 局域网 
 Lan:             {type: http, behavior: ipcidr, format: text, path: ./rule-providers/Lan.list,             url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Lan.list}
 # 拦截广告
 BanAD:           {type: http, behavior: classical, format: text, path: ./rule-providers/BanAD.list,           url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Block/BanAD.list}
 BanEasyList:     {type: http, behavior: classical, format: text, path: ./rule-providers/BanEasyList.list,     url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Block/BanEasyList.list}
 BanEasyPrivacy:  {type: http, behavior: classical, format: text, path: ./rule-providers/BanEasyPrivacy.list,  url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Block/BanEasyPrivacy.list}
 BlockAds:        {type: http, behavior: classical, format: text, path: ./rule-providers/BlockAds.list,        url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/BlockAds.list}
 BlockAdg:        {type: http, behavior: classical, format: text, path: ./rule-providers/BlockAdg.list,        url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/BlockAdg.list}
 Adrules:         {type: http, behavior: classical, format: text, path: ./rule-providers/adrules.list,         url: https://adrules.top/adrules.list}
 # 谷歌服务
 YouTube:        {type: http, behavior: classical, format: text, path: ./rule-providers/YouTube.list,          url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/YouTube.list}
 Google:         {type: http, behavior: classical, format: text, path: ./rule-providers/Google.list,           url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Google.list}
 # 微软服务
 GitHub:         {type: http, behavior: classical, format: text, path: ./rule-providers/GitHub.list,           url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/GitHub.list}
 OneDrive:       {type: http, behavior: classical, format: text, path: ./rule-providers/OneDrive.list,         url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/OneDrive.list}
 Microsoft:      {type: http, behavior: classical, format: text, path: ./rule-providers/Microsoft.list,        url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Microsoft.list}
 # 奈飞影视
 Netflix:        {type: http, behavior: classical, format: text, path: ./rule-providers/Netflix.list,         url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/Netflix.list}
 # 国际抖音 
 TikTok:         {type: http, behavior: classical, format: text, path: ./rule-providers/TikTok.list,          url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/TikTok.list}
 # ChatGPT
 OpenAI:         {type: http, behavior: classical, format: text, path: ./rule-providers/OpenAI.list,          url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/OpenAI.list}
 # 电报信息
 Telegram:       {type: http, behavior: classical, format: text, path: ./rule-providers/Telegram.list,        url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Telegram.list}
 # 贝宝支付
 PayPal:        {type: http, behavior: classical, format: text, path: ./rule-providers/PayPal.list,           url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/PayPal.list}
 # 推特加速
 Twitter:       {type: http, behavior: classical, format: text, path: ./rule-providers/Twitter.list,          url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Twitter.list}
 # 脸书加速
 Facebook:      {type: http, behavior: classical, format: text, path: ./rule-providers/Facebook.list,         url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Facebook.list}
 # 游戏加速
 Game:          {type: http, behavior: classical, format: text, path: ./rule-providers/Game.list,             url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Game.list}
 # 海外媒体
 GlobalMedia:   {type: http, behavior: classical, format: text, path: ./rule-providers/GlobalMedia.list,      url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/GlobalMedia.list}
 # 国际代理
 GlobalGFW:     {type: http, behavior: classical, format: text, path: ./rule-providers/GlobalGFW.list,       url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/GlobalGFW.list}
 # 苹果服务
 Apple:         {type: http, behavior: classical, format: text, path: ./rule-providers/Apple.list,           url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Apple.list}
 # 哔哩哔哩
 Bilibili:      {type: http, behavior: classical, format: text, path: ./rule-providers/Bilibili.list,        url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/Bilibili.list}
 # 国内直连
 WeChat:        {type: http, behavior: classical, format: text, path: ./rule-providers/WeChat.list,          url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/WeChat.list}
 ChinaMedia:    {type: http, behavior: classical, format: text, path: ./rule-providers/ChinaMedia.list,      url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/ChinaMedia.list}
 China:         {type: http, behavior: classical, format: text, path: ./rule-providers/Direct.list,          url: https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Direct.list}

# 分流策略
rules:
  # RULE
  - RULE-SET,Lan,DIRECT
  - RULE-SET,BlockAds,REJECT
  - RULE-SET,BlockAdg,REJECT
  - RULE-SET,BanAD,REJECT
  - RULE-SET,BanEasyList,REJECT
  - RULE-SET,Adrules,REJECT
  - RULE-SET,BanEasyPrivacy,REJECT
  - RULE-SET,YouTube,谷歌代理
  - RULE-SET,Google,谷歌代理
  - RULE-SET,GitHub,微软代理
  - RULE-SET,OneDrive,微软代理
  - RULE-SET,Microsoft,微软代理
  - RULE-SET,Telegram,电报代理
  - RULE-SET,OpenAI,狮城节点
  - RULE-SET,Game,游戏代理
  - RULE-SET,PayPal,推特代理
  - RULE-SET,Twitter,推特代理
  - RULE-SET,Facebook,推特代理
  - RULE-SET,Netflix,海外媒体
  - RULE-SET,TikTok,海外媒体
  - RULE-SET,GlobalMedia,海外媒体
  - RULE-SET,GlobalGFW,海外网站
  - RULE-SET,Apple,苹果服务
  - RULE-SET,Bilibili,哔哩哔哩
  - RULE-SET,WeChat,DIRECT
  - RULE-SET,ChinaMedia,DIRECT
  - RULE-SET,China,DIRECT
  - GEOIP,CN,DIRECT,no-resolve
  - MATCH,海外网站

# 屏蔽443
script:
  shortcuts:
    quic: network == 'udp' and dst_port == 443
