#!name = Mihomo 配置文件
#!date = 2024-03-10 10:00
#!source = https://wiki.metacubex.one/example/conf/#__tabbed_1_3

######### 锚点 start #######
# 策略组相关
pr: &pr {type: select, proxies: [自动, 香港, 台湾, 美国, 狮城, 日本, 韩国, 直连, 全部]}
# 这里是订阅更新和延迟测试相关的
p: &p {type: http, interval: 3600, health-check: {enable: true, url: https://www.gstatic.com/generate_204, interval: 300}}
######### 锚点 end #######

# url 里填写自己的订阅,名称不能重复
proxy-providers:
  provider1:
    <<: *p
    url: ""

  provider2:
    <<: *p
    url: ""

# 全局配置
# 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求 AAAA 记录
ipv6: true
# 允许局域网的连接（可用来共享加速）
allow-lan: true
# 绑定 IP 地址，仅作用于 allow-lan 为 true，'*'表示所有地址
bind-address: "*"
# 混合端口 HTTP和SOCKS5用一个端口
mixed-port: 7890
# 更换延迟计算方式,去除握手等额外延迟
unified-delay: false
# TCP 并发连接所有 IP, 将使用最快握手的 TCP
tcp-concurrent: true
# 外部控制器,可以使用 RESTful API 来控制你的 clash 内核
external-controller: 0.0.0.0:9090
# 外部用户界面
external-ui: ui
# 自定义外部用户界面下载地址
external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"

# 匹配所有进程（always/strict/off）
## always 开启，强制匹配所有进程， strict 默认，由 Clash 判断是否开启， off 不匹配进程，推荐在路由器上使用此模式
find-process-mode: strict
# 全局 TLS 指纹，优先低于 proxy 内的 client-fingerprint
## 可选： "chrome","firefox","safari","ios","random","none" options.
global-client-fingerprint: chrome

# profile 应为扩展配置，但在 Clash.meta, 仅作为缓存项使用
profile:
  # 储存 API 对策略组的选择，以供下次启动时使用
  store-selected: true
  # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址
  store-fake-ip: true

# 嗅探域名 可选配置
sniffer:
  enable: true
# TLS 和 QUIC 默认如果不配置 ports 默认嗅探 443
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
# 需要跳过嗅探的域名
  skip-classical:
    - "Mijia Cloud"

# TUN配置
tun:
  enable: true
# 可选： system/gvisor/mixed
  stack: gvisor
# 需要劫持的 DNS
  dns-hijack:
    - "any:53"
# 配置路由表
  auto-route: true
# 自动识别出口网卡
  auto-detect-interface: true

# DNS配置
dns:
# 关闭将使用系统 DNS
  enable: true
# 开启 DNS 服务器监听
  listen: :53
  ipv6: true
# 模式：redir-host 或 fake-ip
  enhanced-mode: fake-ip
# Fake-IP解析地址池
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - "*"
    - "+.lan"
    - "+.local"
# 只能使用纯 IP 地址，可使用加密 DNS
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
# 这部分为主要 DNS 配置，影响所有直连，确保使用对大陆解析精准的 DNS
  nameserver:
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query

# 单个出站加速节点
proxies:
- name: "直连"
  type: direct
  udp: true

# 策略组
proxy-groups:
  # 策略分流分组
  - {name: 海外网站, <<: *pr}
  - {name: 海外媒体, <<: *pr}
  - {name: 谷歌代理, <<: *pr}
  - {name: 微软代理, <<: *pr}
  - {name: 电报代理, <<: *pr}
  - {name: 推特代理, <<: *pr}
  - {name: 游戏代理, <<: *pr}
  - {name: 人工智能, <<: *pr}
  - {name: 苹果服务, type: select, proxies: [国内直连, 全部节点]}
  - {name: 哔哩哔哩, type: select, proxies: [国内直连, 香港节点, 台湾节点]}
  # 地区分组筛选
  - {name: 香港节点, type: url-test, include-all-providers: true, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 台湾节点, type: url-test, include-all-providers: true, filter: "(?=.*(台|TW|(?i)Taiwan))^((?!(港|日|韩|新|美)).)*$" }
  - {name: 美国节点, type: url-test, include-all-providers: true, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: 狮城节点, type: url-test, include-all-providers: true, filter: "(?=.*(新|狮|獅|SG|(?i)Singapore))^((?!(港|台|日|韩|美|西)).)*$"}
  - {name: 日本节点, type: url-test, include-all-providers: true, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: 韩国节点, type: url-test, include-all-providers: true, filter: "(?=.*(韩|KR|(?i)Korea))^((?!(台|日|港|新|美)).)*$"}
  - {name: 全部节点, type: select, include-all-providers: true}
  - {name: 自动选择, type: url-test, include-all-providers: true, tolerance: 10}
  - {name: 负载均衡, type: load-balance, include-all-providers: true, strategy: consistent-hashing}

# 分流策略
rules:
  - RULE-SET,Lan,国内直连
  - RULE-SET,Adrules,REJECT
  - RULE-SET,BanAD,REJECT
  - RULE-SET,BlockAds,REJECT
  - RULE-SET,BlockAdg,REJECT
  - RULE-SET,BanEasyList,REJECT
  - RULE-SET,BanProgramAD,REJECT
  - RULE-SET,BanEasyPrivacy,REJECT
  - RULE-SET,YouTube,谷歌代理
  - RULE-SET,Google,谷歌代理
  - RULE-SET,Copilot,微软代理
  - RULE-SET,GitHub,微软代理
  - RULE-SET,OneDrive,微软代理
  - RULE-SET,Microsoft,微软代理
  - RULE-SET,Telegram,电报代理
  - RULE-SET,OpenAI,人工智能
  - RULE-SET,Game,游戏代理
  - RULE-SET,PayPal,推特代理
  - RULE-SET,Twitter,推特代理
  - RULE-SET,Facebook,推特代理
  - RULE-SET,Netflix,海外媒体
  - RULE-SET,TikTok,海外媒体
  - RULE-SET,GlobalMedia,海外媒体
  - RULE-SET,GlobalGFW,海外网站
  - RULE-SET,Apple,苹果服务
  - RULE-SET,Bilibili,哔哩哔哩
  - RULE-SET,WeChat,国内直连
  - RULE-SET,ChinaMedia,国内直连
  - RULE-SET,China,国内直连
  - GEOIP,CN,国内直连,no-resolve
  - MATCH,海外网站

# 
rule-anchor:
  # classical 规则相关
  classical: &classical {type: http, interval: 86400, behavior: classical, format: text}

# 规则集
rule-providers:
# 广告拦截
  Adrules:
    <<: *classical
    url: "https://adrules.top/adrules.list"
  BanAD:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Block/BanAD.list"
  BanEasyList:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Block/BanEasyList.list"
  BanEasyPrivacy:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Block/BanEasyPrivacy.list"
  BanProgramAD:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Block/BanProgramAD.list"
  BlockAds:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/BlockAds.list"
  BlockAdg:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/BlockAdg.list"
# 谷歌服务
  YouTube:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/YouTube.list"
  Google:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Google.list"
# 微软服务
  Copilot:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Copilot.list"
  GitHub:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/GitHub.list"
  OneDrive:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/OneDrive.list"
  Microsoft:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Microsoft.list"
# 电报服务
  Telegram:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Telegram.list"
# ChatGPT
  OpenAI:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/OpenAI.list"
# 奈飞影视
  Netflix:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/Netflix.list"
# 国际抖音
  TikTok:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/TikTok.list"
# 贝宝支付
  PayPal:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/PayPal.list"
# 推特加速
  Twitter:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Twitter.list"
# 脸书加速
  Facebook:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Facebook.list"
# 游戏加速
  Game:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Game.list"
# 海外媒体
  GlobalMedia:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/GlobalMedia.list"
# 海外服务
  GlobalGFW:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/GlobalGFW.list"
# 苹果服务
  Apple:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/Apple.list"
# 哔哩哔哩
  Bilibili:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/Bilibili.list"
# 国内服务
  WeChat:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Other/WeChat.list"
  ChinaMedia:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Media/ChinaMedia.list"
  China:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Direct.list"
# 局域网
  Lan:
    <<: *classical
    url: "https://cdn.jsdelivr.net/gh/axcsz/Collect@master/Ruleset/Lan.list"

# 屏蔽443
script:
  shortcuts:
    quic: network == 'udp' and dst_port == 443
