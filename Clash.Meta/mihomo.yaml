#!name = mihomo 配置文件
#!desc = 说明：理论上适用于 所有的 meta 内核，已测试的有 Clash Verg Rev、Openclash、mihomo 
#!date = 2024-05-18 20:00
#!source = https://wiki.metacubex.one/example/conf/#__tabbed_1_3

######### 机场锚点 start #######

# 机场订阅更新 & 延迟测试
p: &p {type: http, interval: 3600, health-check: {enable: true, url: https://www.youtube.com/generate_204, interval: 300}}

######### 机场锚点 end #######

# 机场订阅，名称不能重复
proxy-providers:
  Airport1:
    <<: *p
    url: "此处填写机场订阅"
  Airport2:
    <<: *p
    url: "此处填写机场订阅"
   
# 全局配置
# # 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求 AAAA 记录 true/false
ipv6: true
# 允许局域网连接
allow-lan: true
# HTTP(S) 和 SOCKS 代理混合端口
mixed-port: 56789
# 更换延迟计算方式,去除握手等额外延迟
unified-delay: false
# TCP 并发连接所有 IP, 将使用最快握手的 TCP
tcp-concurrent: true

# 配置 WEB UI
external-ui: ui
# 外部控制器，可以使用 RESTful API 来控制你的 Clash 内核
external-controller: 0.0.0.0:9090
# 自定义外部用户界面下载地址
external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"

# 匹配所有进程 always/strict/off
##  - always, 开启，强制匹配所有进程
##  - strict, 默认，由 mihomo 判断是否开启
##  - off, 不匹配进程，推荐在路由器上使用此模式
find-process-mode: strict
# 全局 TLS 指纹，优先低于 proxy 内的 client-fingerprint
##  - 可选： "chrome","firefox","safari","ios","random","none" options.
##  - Utls is currently support TLS transport in TCP/grpc/WS/HTTP for VLESS/Vmess and trojan.
global-client-fingerprint: chrome

# profile 应为扩展配置，但在 mihomo, 仅作为缓存项使用
profile:
  # 储存 API 对策略组的选择，以供下次启动时使用
  store-selected: true
  # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址
  store-fake-ip: true

# 嗅探域名 可选配置
sniffer:
  enable: true
# TLS 和 QUIC 默认如果不配置 ports 默认嗅探 443
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
# 需要跳过嗅探的域名
  skip-classical:
    - "Mijia Cloud"     # 米家设备，建议加
    - "dlg.io.mi.com"
    - "+.apple.com"     # 苹果域名，建议加

# TUN 配置
tun:
  enable: true
# 可选： gvisor/mixed
  stack: mixed
# DNS 劫持，一般设置为 any:53 即可, 即劫持所有53端口的 udp 流量
  dns-hijack:
    - "any:53"
# 自动设置全局路由表，可以自动将全局流量路由进入 TUN 网卡。
  auto-route: true
# 自动识别出口网卡
  auto-detect-interface: true

# DNS 配置
dns:
# 关闭将使用系统 DNS
  enable: true
# 开启 DNS 服务器监听
  listen: :53
# IPV6解析开关；如果为false，将返回ipv6结果为空
  ipv6: true
# 模式：redir-host 或 fake-ip （默认使用 fake-ip 模式）
  enhanced-mode: fake-ip
# Fake-IP解析地址池
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - "*"
    - "+.lan"
    - "+.local"
# 解析非 IP 的 DNS 用的 DNS 服务器，只支持纯 IP
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
# 这部分为主要 DNS 配置，支持udp/tcp/dot/doh/doq，影响所有直连，确保使用对大陆解析精准的 DNS
  nameserver:
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query

# 单个出站代理节点
proxies:
# 直连节点
- name: "国内直连"
  type: direct
  udp: true
  tfo: true
  mptcp: true
  ip-version: ipv6-prefer

######### 策略锚点 start #######

# 策略组
pg: &pg {type: select, proxies: [手动选择, 自动选择, 香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点, 其他节点]}

# 手动选择策略
se: &se {type: select, include-all-providers: true}

# 自动优选策略
ut: &ut {type: url-test, include-all-providers: true}

# 负载均衡策略
lb: &lb {type: load-balance, include-all-providers: true, strategy: consistent-hashing}

# 地区节点筛选
HK: &HK '(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$'
TW: &TW '(?=.*(台|TW|(?i)Taiwan))^((?!(港|日|韩|新|美)).)*$'
US: &US '(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$'
SG: &SG '(?=.*(新|狮|獅|SG|(?i)Singapore))^((?!(港|台|日|韩|美|西)).)*$'
JP: &JP '(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美|尼)).)*$'
KR: &KR '(?=.*(韩|KR|(?i)Korea))^((?!(台|日|港|新|美)).)*$'
OTH: &OTH '^(?!.*(港|台|日本|韩|坡|美|HK|US|TW|JP|KR|SG|Hong|Tai|Japan|Korea|Singapore|States))'
ALL: &ALL '^(?!.*(日期|邀请|返利|循环|官网|客服))'

######### 策略锚点 end #######

# 策略组
proxy-groups:
  # 软件策略
  - {name: 手动选择, type: select, proxies: [自动选择, 香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: YouTube, <<: *pg}
  - {name: Google, <<: *pg}
  - {name: Microsoft, <<: *pg}
  - {name: TikTok, <<: *pg}
  - {name: Netflix, <<: *pg}
  - {name: Disney+, <<: *pg}
  - {name: Spotify, <<: *pg}
  - {name: Telegram, <<: *pg}
  - {name: ChatGPT, <<: *pg}
  - {name: PayPal, <<: *pg}
  - {name: Twitter, <<: *pg}
  - {name: Facebook, <<: *pg}
  - {name: GlobalGFW, <<: *pg}
  - {name: Apple, type: select, proxies: [国内直连, 手动选择, 自动选择, 香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: Bilibili, type: select, proxies: [国内直连, 手动选择, 自动选择, 香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: China, type: select, proxies: [国内直连, 手动选择, 自动选择, 香港节点, 台湾节点, 美国节点, 狮城节点, 日本节点, 韩国节点]}
  - {name: 兜底规则, <<: *pg}
  # 地区分组
  - {name: 香港节点, type: select, proxies: [香港优选, 香港负载]}
  - {name: 台湾节点, type: select, proxies: [台湾优选, 台湾负载]}
  - {name: 美国节点, type: select, proxies: [美国优选, 美国负载]}
  - {name: 狮城节点, type: select, proxies: [狮城优选, 狮城负载]}
  - {name: 日本节点, type: select, proxies: [日本优选, 日本负载]}
  - {name: 韩国节点, type: select, proxies: [韩国优选, 韩国负载]}
  # 优选筛选
  - {name: 香港优选, <<: *ut, filter: *HK}
  - {name: 台湾优选, <<: *ut, filter: *TW}
  - {name: 美国优选, <<: *ut, filter: *US}
  - {name: 狮城优选, <<: *ut, filter: *SG}
  - {name: 日本优选, <<: *ut, filter: *JP}
  - {name: 韩国优选, <<: *ut, filter: *KR}
  # 负载筛选
  - {name: 香港负载, <<: *lb, filter: *HK}
  - {name: 台湾负载, <<: *lb, filter: *TW}
  - {name: 美国负载, <<: *lb, filter: *US}
  - {name: 狮城负载, <<: *lb, filter: *SG}
  - {name: 日本负载, <<: *lb, filter: *JP}
  - {name: 韩国负载, <<: *lb, filter: *KR}
# 其他
  - {name: 其他节点, <<: *se, filter: *OTH}
  - {name: 自动选择, <<: *ut, filter: *ALL}


# 分流策略
rules:
  - RULE-SET,Lan,China
  - RULE-SET,Adrules,REJECT
  - RULE-SET,YouTube,YouTube
  - RULE-SET,Google,Google
  - RULE-SET,Copilot,Microsoft
  - RULE-SET,GitHub,Microsoft
  - RULE-SET,OneDrive,Microsoft
  - RULE-SET,Microsoft,Microsoft
  - RULE-SET,TikTok,TikTok
  - RULE-SET,Netflix,Netflix
  - RULE-SET,Disney+,Disney+
  - RULE-SET,Spotify,Spotify
  - RULE-SET,Telegram,Telegram
  - RULE-SET,OpenAI,ChatGPT
  - RULE-SET,PayPal,PayPal
  - RULE-SET,Twitter,Twitter
  - RULE-SET,Facebook,Facebook
  - RULE-SET,GlobalMedia,GlobalGFW
  - RULE-SET,GlobalGFW,GlobalGFW
  - RULE-SET,Apple,Apple
  - RULE-SET,Bilibili,Bilibili
  - RULE-SET,WeChat,China
  - RULE-SET,ChinaMedia,China
  - RULE-SET,China,China
  - GEOIP,CN,China,no-resolve
  - MATCH,兜底规则


######### 规则锚点 start #######

# 规则集
rule-anchor:
  # classical 规则相关
  classical: &classical {type: http, interval: 86400, behavior: classical, format: text}

######### 规则锚点 end #######

# 订阅规则集
rule-providers:
# 广告拦截
  Adrules:
    <<: *classical
    url: "https://adrules.top/adrules.list"
# 谷歌服务
  YouTube:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/YouTube.list"
  Google:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Google.list"
# 微软服务
  Copilot:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Copilot.list"
  GitHub:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/GitHub.list"
  OneDrive:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/OneDrive.list"
  Microsoft:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Microsoft.list"
# 电报服务
  Telegram:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Telegram.list"
# ChatGPT
  OpenAI:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/OpenAI.list"
# 贝宝支付
  PayPal:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/PayPal.list"
# 推特加速
  Twitter:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Twitter.list"
# 脸书加速
  Facebook:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Facebook.list"
# 海外抖音
  TikTok:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/TikTok.list"
# 奈飞影视
  Netflix:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/Netflix.list"
# 迪士尼+
  Disney+:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/Disney+.list"
# Spotify
  Spotify:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/Spotify.list"
# 海外媒体
  GlobalMedia:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/GlobalMedia.list"
# 海外服务
  GlobalGFW:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/GlobalGFW.list"
# 苹果服务
  Apple:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Apple.list"
# 哔哩哔哩
  Bilibili:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/Bilibili.list"
# 国内服务
  WeChat:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/WeChat.list"
  ChinaMedia:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/ChinaMedia.list"
  China:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Direct.list"
# 局域网
  Lan:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Local.list"

# 屏蔽 443
script:
  shortcuts:
    quic: network == 'udp' and dst_port == 443
