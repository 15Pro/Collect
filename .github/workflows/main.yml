name: 同步上游仓库到指定文件夹

on:
  workflow_dispatch:  # 允许手动触发工作流
  schedule:
    - cron: "0 */6 * * *"  # 设置定时触发，每6小时执行一次

jobs:
  sync:
    runs-on: ubuntu-latest  # 在最新版本的Ubuntu环境中运行
    env:
      TZ: 'Asia/Shanghai'  # 设置时区为上海时间

    steps:
      - name: 检出当前仓库代码
        uses: actions/checkout@v4
        with:
          persist-credentials: false  # 禁用持久化凭据
        # 说明：检出当前仓库的代码，供后续步骤使用

      - name: 同步上游仓库内容到指定文件夹
        run: |
          #!/bin/bash
          set -e  # 当命令发生错误时，终止脚本执行

          # 定义关联数组，将目标文件夹名与对应的上游仓库地址进行映射
          declare -A repos=(
            ["JK"]="https://github.com/Abcd789JK/Tools.git"
            ["TH"]="https://github.com/thNylHx/Tools.git"
          )

          # 遍历数组中的每一项
          for folder in "${!repos[@]}"; do
            repo_url=${repos[$folder]}
            echo "开始同步文件夹 ${folder}，上游仓库地址：${repo_url}"

            # 克隆上游仓库到临时目录
            git clone --depth=1 "$repo_url" "upstream_$folder"

            # 创建目标文件夹（若不存在则自动创建）
            mkdir -p "$folder"

            # 清空目标文件夹中的原有内容
            rm -rf "$folder"/*

            # 将上游仓库中的所有内容复制到目标文件夹
            cp -a "upstream_$folder/." "$folder/"

            # 删除临时克隆的仓库，保持工作目录整洁
            rm -rf "upstream_$folder"

            echo "文件夹 ${folder} 同步完成"
          done
        # 说明：通过循环，将上游仓库的内容克隆并复制到当前仓库的对应文件夹中

      - name: 提交并推送更改
        run: |
          #!/bin/bash
          set -e  # 当命令发生错误时，终止脚本执行

          # 配置 Git 用户信息
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # 检查是否有更改需要提交
          if git status --porcelain | grep .; then
            # 添加所有更改到暂存区
            git add -A

            # 提交更改
            git commit -m "同步上游仓库内容"

            # 推送更改到 master 分支
            git push origin master
          else
            echo "没有检测到需要提交的更改"
          fi
        # 说明：将同步的内容提交并推送到当前仓库的 master 分支
