#!name = mihomo 配置文件
#!desc = 说明：
#!date = 2024-05-23 11:00
#!source = https://wiki.metacubex.one/example/conf/#__tabbed_1_4

######### 锚点 start #######
# 这里是订阅更新和延迟测试相关的
p: &p {type: http, interval: 1800, health-check: {enable: true, url: https://www.gstatic.com/generate_204, interval: 300}, proxy: DIRECT}


# url 里填写自己的订阅,名称不能重复
proxy-providers:
  provider1:
    <<: *p
    url: ""


# 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求 AAAA 记录 true/false
ipv6: true
# 规则模式：rule（规则） / global（全局代理）/ direct（全局直连）
mode: rule
# 允许局域网连接
allow-lan: true
# 设置日志输出级别 (5 个级别：silent / error / warning / info / debug）
log-level: info
# HTTP(S) 和 SOCKS 代理混合端口
mixed-port: 56789
# 外部控制器，可以使用 RESTful API 来控制你的 Clash 内核
external-controller: 0.0.0.0:9090

# profile 应为扩展配置，但在 mihomo, 仅作为缓存项使用
profile:
  # 储存 API 对策略组的选择，以供下次启动时使用
  store-selected: true
  # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址
  store-fake-ip: true

# DNS 配置
dns:
# 关闭将使用系统 DNS
  enable: true
# IPV6解析开关；如果为false，将返回ipv6结果为空
  ipv6: true
# 模式：redir-host 或 fake-ip （默认使用 fake-ip 模式）
  enhanced-mode: fake-ip
# Fake-IP解析地址池
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - "*"
    - "+.lan"
    - "+.local"
# 解析非 IP 的 DNS 用的 DNS 服务器，只支持纯 IP
  default-nameserver:
    - 223.5.5.5
    - 223.6.6.6
# 这部分为主要 DNS 配置，支持udp/tcp/dot/doh/doq，影响所有直连，确保使用对大陆解析精准的 DNS
  nameserver:
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query


proxies:
- name: "直连"
  type: direct
  udp: true
  tfo: true
  mptcp: true
  ip-version: ipv6-prefer


######### 策略锚点 start #######
# 策略组
pr: &pr {type: select, proxies: [香港, 台湾, 美国, 狮城, 日本, 韩国, 其他]}

# 手动选择策略
mt: &mt {type: select, include-all-providers: true}

# 自动优选策略
ac: &ac {type: url-test, include-all-providers: true, url: https://www.gstatic.com/generate_204, tolerance: 10, interval: 300}

# 负载均衡策略
lb: &lb {type: load-balance, include-all-providers: true, url: https://www.gstatic.com/generate_204, tolerance: 10, interval: 300, strategy: consistent-hashing}

# 策略组
proxy-groups:
  # 策略分流分组
  - {name: 谷歌, <<: *pg}
  - {name: 微软, <<: *pg}
  - {name: 社交, <<: *pg}
  - {name: 智能, <<: *pg}
  - {name: 游戏, <<: *pg}
  - {name: 媒体, <<: *pg}
  - {name: 海外, <<: *pg}
  - {name: 苹果, type: select, proxies: [直连, 海外]}
  # 地区分组筛选
  - {name: 香港, <<: *ac, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 台湾, <<: *ac, filter: "(?=.*(台|TW|(?i)Taiwan))^((?!(港|日|韩|新|美)).)*$" }
  - {name: 美国, <<: *ac, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: 狮城, <<: *ac, filter: "(?=.*(新|狮|獅|SG|(?i)Singapore))^((?!(港|台|日|韩|美|西)).)*$"}
  - {name: 日本, <<: *ac, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美|尼)).)*$" }
  - {name: 韩国, <<: *ac, filter: "(?=.*(韩|KR|(?i)Korea))^((?!(台|日|港|新|美)).)*$"}
  - {name: 其他, <<: *mt, filter: "^(?!.*(港|台|日本|韩|坡|美|HK|US|TW|JP|KR|SG|Hong|Tai|Japan|Korea|Singapore|States))"}

# 规则集
rules:
  - RULE-SET,Adrules_domainset,REJECT
  - RULE-SET,AdsBlock,REJECT
  - RULE-SET,Lan,直连
  - RULE-SET,Game,游戏
  - RULE-SET,OpenAI,智能
  - RULE-SET,Twitter,社交
  - RULE-SET,Facebook,社交
  - RULE-SET,Telegram,社交
  - RULE-SET,YouTube,谷歌
  - RULE-SET,Google,谷歌
  - RULE-SET,GitHub,微软
  - RULE-SET,OneDrive,微软
  - RULE-SET,Microsoft,微软
  - RULE-SET,TikTok,媒体
  - RULE-SET,Netflix,媒体
  - RULE-SET,GlobalMedia,媒体
  - RULE-SET,GlobalGFW,海外
  - RULE-SET,Apple,苹果
  - RULE-SET,ChinaMedia,直连
  - RULE-SET,China,直连
  - GEOIP,CN,直连,no-resolve
  - MATCH,海外


######### 规则锚点 #######
rule-anchor:
  # ipcidr 规则相关
  ip: &ip {type: http, interval: 43200, behavior: ipcidr, format: text, proxy: 微软}

  # domain 规则相关
  domain: &domain {type: http, interval: 43200, behavior: domain, format: text, proxy: 微软}

  # classical 规则相关
  classical: &classical {type: http, interval: 43200, behavior: classical, format: text, proxy: 微软}


# 规则集
rule-providers:
# domain 规则集
  # 广告拦截
  Adrules_domainset:
    <<: *domain
    url: "https://adrules.top/adrules_domainset.txt"
  AdsBlock:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Block/AdsBlock.list"
# 游戏平台
  Game:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Game.list"
# ChatGPT
  OpenAI:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/OpenAI.list"
# 谷歌服务
  YouTube:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/YouTube.list"
  Google:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Google.list"
# 微软服务
  GitHub:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/GitHub.list"
  OneDrive:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/OneDrive.list"
  Microsoft:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Microsoft.list"
# 社交平台
  Telegram:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Telegram.list"
  Facebook:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Facebook.list"
  Twitter:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Twitter.list"
# 影视媒体
  Netflix:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/Netflix.list"
  TikTok:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/TikTok.list"
  GlobalMedia:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/GlobalMedia.list"
# 海外服务
  GlobalGFW:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/GlobalGFW.list"
# 苹果服务
  Apple:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/Apple.list"
# 国内服务
  WeChat:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Other/WeChat.list"
  ChinaMedia:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Media/ChinaMedia.list"
  China:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Direct.list"
# 本地/局域网
  Lan:
    <<: *classical
    url: "https://raw.githubusercontent.com/axcsz/Collect/master/Ruleset/Local.list"


# script
script:
  # 使用 Python 表达式编写自定义规则
  shortcuts: 
    # 4483 与 9305 为 BiliBili 的 QUIC CDN
    # 可以在 rule 中引用
    quic: network == 'udp' and (dst_port == 443 or dst_port == 4483 or dst_port == 9305)
